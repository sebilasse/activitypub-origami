{"version":3,"sources":["webpack://redaktor/./node_modules/resize-observer-polyfill/dist/ResizeObserver.js","webpack://redaktor/ResizeObserver.ts"],"names":["global","factory","MapShim","Map","getIndex","arr","key","result","some","entry","index","class_1","this","__entries__","Object","defineProperty","prototype","get","length","enumerable","configurable","set","value","push","delete","entries","splice","has","clear","forEach","callback","ctx","_i","_a","call","isBrowser","window","document","global$1","Math","self","Function","requestAnimationFrame$1","requestAnimationFrame","bind","setTimeout","Date","now","trailingTimeout","REFRESH_DELAY","transitionKeys","mutationObserverSupported","MutationObserver","ResizeObserverController","connected_","mutationEventsAdded_","mutationsObserver_","observers_","onTransitionEnd_","refresh","delay","leadingCall","trailingCall","lastCallTime","resolvePending","proxy","timeoutCallback","timeStamp","throttle","addObserver","observer","indexOf","connect_","removeObserver","observers","disconnect_","updateObservers_","activeObservers","filter","gatherActive","hasActive","broadcastActive","addEventListener","observe","attributes","childList","characterData","subtree","removeEventListener","disconnect","_b","propertyName","getInstance","instance_","defineConfigurable","target","props","keys","writable","getWindowOf","ownerDocument","defaultView","emptyRect","createRectInit","toFloat","parseFloat","getBordersSize","styles","positions","arguments","reduce","size","position","getHTMLElementContentRect","clientWidth","clientHeight","getComputedStyle","paddings","positions_1","getPaddings","horizPad","left","right","vertPad","top","bottom","width","height","boxSizing","round","documentElement","isDocumentElement","vertScrollbar","horizScrollbar","abs","isSVGGraphicsElement","SVGGraphicsElement","SVGElement","getBBox","getContentRect","bbox","getSVGContentRect","x","y","ResizeObservation","broadcastWidth","broadcastHeight","contentRect_","isActive","rect","broadcastRect","ResizeObserverEntry","rectInit","Constr","contentRect","DOMRectReadOnly","create","ResizeObserverSPI","controller","callbackCtx","activeObservations_","observations_","TypeError","callback_","controller_","callbackCtx_","Element","observations","unobserve","clearActive","_this","observation","map","WeakMap","ResizeObserver","method","apply","module","exports","__webpack_require__","r","__webpack_exports__","_global__WEBPACK_IMPORTED_MODULE_0__","_has_has__WEBPACK_IMPORTED_MODULE_1__","resize_observer_polyfill__WEBPACK_IMPORTED_MODULE_2__","resize_observer_polyfill__WEBPACK_IMPORTED_MODULE_2___default","n","a"],"mappings":"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","file":"platform/ResizeObserver.892ef6a7334a6d499a89.bundle.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global.ResizeObserver = factory());\n}(this, (function () { 'use strict';\n\n    /**\n     * A collection of shims that provide minimal functionality of the ES6 collections.\n     *\n     * These implementations are not meant to be used outside of the ResizeObserver\n     * modules as they cover only a limited range of use cases.\n     */\n    /* eslint-disable require-jsdoc, valid-jsdoc */\n    var MapShim = (function () {\n        if (typeof Map !== 'undefined') {\n            return Map;\n        }\n        /**\n         * Returns index in provided array that matches the specified key.\n         *\n         * @param {Array<Array>} arr\n         * @param {*} key\n         * @returns {number}\n         */\n        function getIndex(arr, key) {\n            var result = -1;\n            arr.some(function (entry, index) {\n                if (entry[0] === key) {\n                    result = index;\n                    return true;\n                }\n                return false;\n            });\n            return result;\n        }\n        return /** @class */ (function () {\n            function class_1() {\n                this.__entries__ = [];\n            }\n            Object.defineProperty(class_1.prototype, \"size\", {\n                /**\n                 * @returns {boolean}\n                 */\n                get: function () {\n                    return this.__entries__.length;\n                },\n                enumerable: true,\n                configurable: true\n            });\n            /**\n             * @param {*} key\n             * @returns {*}\n             */\n            class_1.prototype.get = function (key) {\n                var index = getIndex(this.__entries__, key);\n                var entry = this.__entries__[index];\n                return entry && entry[1];\n            };\n            /**\n             * @param {*} key\n             * @param {*} value\n             * @returns {void}\n             */\n            class_1.prototype.set = function (key, value) {\n                var index = getIndex(this.__entries__, key);\n                if (~index) {\n                    this.__entries__[index][1] = value;\n                }\n                else {\n                    this.__entries__.push([key, value]);\n                }\n            };\n            /**\n             * @param {*} key\n             * @returns {void}\n             */\n            class_1.prototype.delete = function (key) {\n                var entries = this.__entries__;\n                var index = getIndex(entries, key);\n                if (~index) {\n                    entries.splice(index, 1);\n                }\n            };\n            /**\n             * @param {*} key\n             * @returns {void}\n             */\n            class_1.prototype.has = function (key) {\n                return !!~getIndex(this.__entries__, key);\n            };\n            /**\n             * @returns {void}\n             */\n            class_1.prototype.clear = function () {\n                this.__entries__.splice(0);\n            };\n            /**\n             * @param {Function} callback\n             * @param {*} [ctx=null]\n             * @returns {void}\n             */\n            class_1.prototype.forEach = function (callback, ctx) {\n                if (ctx === void 0) { ctx = null; }\n                for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {\n                    var entry = _a[_i];\n                    callback.call(ctx, entry[1], entry[0]);\n                }\n            };\n            return class_1;\n        }());\n    })();\n\n    /**\n     * Detects whether window and document objects are available in current environment.\n     */\n    var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;\n\n    // Returns global object of a current environment.\n    var global$1 = (function () {\n        if (typeof global !== 'undefined' && global.Math === Math) {\n            return global;\n        }\n        if (typeof self !== 'undefined' && self.Math === Math) {\n            return self;\n        }\n        if (typeof window !== 'undefined' && window.Math === Math) {\n            return window;\n        }\n        // eslint-disable-next-line no-new-func\n        return Function('return this')();\n    })();\n\n    /**\n     * A shim for the requestAnimationFrame which falls back to the setTimeout if\n     * first one is not supported.\n     *\n     * @returns {number} Requests' identifier.\n     */\n    var requestAnimationFrame$1 = (function () {\n        if (typeof requestAnimationFrame === 'function') {\n            // It's required to use a bounded function because IE sometimes throws\n            // an \"Invalid calling object\" error if rAF is invoked without the global\n            // object on the left hand side.\n            return requestAnimationFrame.bind(global$1);\n        }\n        return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };\n    })();\n\n    // Defines minimum timeout before adding a trailing call.\n    var trailingTimeout = 2;\n    /**\n     * Creates a wrapper function which ensures that provided callback will be\n     * invoked only once during the specified delay period.\n     *\n     * @param {Function} callback - Function to be invoked after the delay period.\n     * @param {number} delay - Delay after which to invoke callback.\n     * @returns {Function}\n     */\n    function throttle (callback, delay) {\n        var leadingCall = false, trailingCall = false, lastCallTime = 0;\n        /**\n         * Invokes the original callback function and schedules new invocation if\n         * the \"proxy\" was called during current request.\n         *\n         * @returns {void}\n         */\n        function resolvePending() {\n            if (leadingCall) {\n                leadingCall = false;\n                callback();\n            }\n            if (trailingCall) {\n                proxy();\n            }\n        }\n        /**\n         * Callback invoked after the specified delay. It will further postpone\n         * invocation of the original function delegating it to the\n         * requestAnimationFrame.\n         *\n         * @returns {void}\n         */\n        function timeoutCallback() {\n            requestAnimationFrame$1(resolvePending);\n        }\n        /**\n         * Schedules invocation of the original function.\n         *\n         * @returns {void}\n         */\n        function proxy() {\n            var timeStamp = Date.now();\n            if (leadingCall) {\n                // Reject immediately following calls.\n                if (timeStamp - lastCallTime < trailingTimeout) {\n                    return;\n                }\n                // Schedule new call to be in invoked when the pending one is resolved.\n                // This is important for \"transitions\" which never actually start\n                // immediately so there is a chance that we might miss one if change\n                // happens amids the pending invocation.\n                trailingCall = true;\n            }\n            else {\n                leadingCall = true;\n                trailingCall = false;\n                setTimeout(timeoutCallback, delay);\n            }\n            lastCallTime = timeStamp;\n        }\n        return proxy;\n    }\n\n    // Minimum delay before invoking the update of observers.\n    var REFRESH_DELAY = 20;\n    // A list of substrings of CSS properties used to find transition events that\n    // might affect dimensions of observed elements.\n    var transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];\n    // Check if MutationObserver is available.\n    var mutationObserverSupported = typeof MutationObserver !== 'undefined';\n    /**\n     * Singleton controller class which handles updates of ResizeObserver instances.\n     */\n    var ResizeObserverController = /** @class */ (function () {\n        /**\n         * Creates a new instance of ResizeObserverController.\n         *\n         * @private\n         */\n        function ResizeObserverController() {\n            /**\n             * Indicates whether DOM listeners have been added.\n             *\n             * @private {boolean}\n             */\n            this.connected_ = false;\n            /**\n             * Tells that controller has subscribed for Mutation Events.\n             *\n             * @private {boolean}\n             */\n            this.mutationEventsAdded_ = false;\n            /**\n             * Keeps reference to the instance of MutationObserver.\n             *\n             * @private {MutationObserver}\n             */\n            this.mutationsObserver_ = null;\n            /**\n             * A list of connected observers.\n             *\n             * @private {Array<ResizeObserverSPI>}\n             */\n            this.observers_ = [];\n            this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);\n            this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);\n        }\n        /**\n         * Adds observer to observers list.\n         *\n         * @param {ResizeObserverSPI} observer - Observer to be added.\n         * @returns {void}\n         */\n        ResizeObserverController.prototype.addObserver = function (observer) {\n            if (!~this.observers_.indexOf(observer)) {\n                this.observers_.push(observer);\n            }\n            // Add listeners if they haven't been added yet.\n            if (!this.connected_) {\n                this.connect_();\n            }\n        };\n        /**\n         * Removes observer from observers list.\n         *\n         * @param {ResizeObserverSPI} observer - Observer to be removed.\n         * @returns {void}\n         */\n        ResizeObserverController.prototype.removeObserver = function (observer) {\n            var observers = this.observers_;\n            var index = observers.indexOf(observer);\n            // Remove observer if it's present in registry.\n            if (~index) {\n                observers.splice(index, 1);\n            }\n            // Remove listeners if controller has no connected observers.\n            if (!observers.length && this.connected_) {\n                this.disconnect_();\n            }\n        };\n        /**\n         * Invokes the update of observers. It will continue running updates insofar\n         * it detects changes.\n         *\n         * @returns {void}\n         */\n        ResizeObserverController.prototype.refresh = function () {\n            var changesDetected = this.updateObservers_();\n            // Continue running updates if changes have been detected as there might\n            // be future ones caused by CSS transitions.\n            if (changesDetected) {\n                this.refresh();\n            }\n        };\n        /**\n         * Updates every observer from observers list and notifies them of queued\n         * entries.\n         *\n         * @private\n         * @returns {boolean} Returns \"true\" if any observer has detected changes in\n         *      dimensions of it's elements.\n         */\n        ResizeObserverController.prototype.updateObservers_ = function () {\n            // Collect observers that have active observations.\n            var activeObservers = this.observers_.filter(function (observer) {\n                return observer.gatherActive(), observer.hasActive();\n            });\n            // Deliver notifications in a separate cycle in order to avoid any\n            // collisions between observers, e.g. when multiple instances of\n            // ResizeObserver are tracking the same element and the callback of one\n            // of them changes content dimensions of the observed target. Sometimes\n            // this may result in notifications being blocked for the rest of observers.\n            activeObservers.forEach(function (observer) { return observer.broadcastActive(); });\n            return activeObservers.length > 0;\n        };\n        /**\n         * Initializes DOM listeners.\n         *\n         * @private\n         * @returns {void}\n         */\n        ResizeObserverController.prototype.connect_ = function () {\n            // Do nothing if running in a non-browser environment or if listeners\n            // have been already added.\n            if (!isBrowser || this.connected_) {\n                return;\n            }\n            // Subscription to the \"Transitionend\" event is used as a workaround for\n            // delayed transitions. This way it's possible to capture at least the\n            // final state of an element.\n            document.addEventListener('transitionend', this.onTransitionEnd_);\n            window.addEventListener('resize', this.refresh);\n            if (mutationObserverSupported) {\n                this.mutationsObserver_ = new MutationObserver(this.refresh);\n                this.mutationsObserver_.observe(document, {\n                    attributes: true,\n                    childList: true,\n                    characterData: true,\n                    subtree: true\n                });\n            }\n            else {\n                document.addEventListener('DOMSubtreeModified', this.refresh);\n                this.mutationEventsAdded_ = true;\n            }\n            this.connected_ = true;\n        };\n        /**\n         * Removes DOM listeners.\n         *\n         * @private\n         * @returns {void}\n         */\n        ResizeObserverController.prototype.disconnect_ = function () {\n            // Do nothing if running in a non-browser environment or if listeners\n            // have been already removed.\n            if (!isBrowser || !this.connected_) {\n                return;\n            }\n            document.removeEventListener('transitionend', this.onTransitionEnd_);\n            window.removeEventListener('resize', this.refresh);\n            if (this.mutationsObserver_) {\n                this.mutationsObserver_.disconnect();\n            }\n            if (this.mutationEventsAdded_) {\n                document.removeEventListener('DOMSubtreeModified', this.refresh);\n            }\n            this.mutationsObserver_ = null;\n            this.mutationEventsAdded_ = false;\n            this.connected_ = false;\n        };\n        /**\n         * \"Transitionend\" event handler.\n         *\n         * @private\n         * @param {TransitionEvent} event\n         * @returns {void}\n         */\n        ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {\n            var _b = _a.propertyName, propertyName = _b === void 0 ? '' : _b;\n            // Detect whether transition may affect dimensions of an element.\n            var isReflowProperty = transitionKeys.some(function (key) {\n                return !!~propertyName.indexOf(key);\n            });\n            if (isReflowProperty) {\n                this.refresh();\n            }\n        };\n        /**\n         * Returns instance of the ResizeObserverController.\n         *\n         * @returns {ResizeObserverController}\n         */\n        ResizeObserverController.getInstance = function () {\n            if (!this.instance_) {\n                this.instance_ = new ResizeObserverController();\n            }\n            return this.instance_;\n        };\n        /**\n         * Holds reference to the controller's instance.\n         *\n         * @private {ResizeObserverController}\n         */\n        ResizeObserverController.instance_ = null;\n        return ResizeObserverController;\n    }());\n\n    /**\n     * Defines non-writable/enumerable properties of the provided target object.\n     *\n     * @param {Object} target - Object for which to define properties.\n     * @param {Object} props - Properties to be defined.\n     * @returns {Object} Target object.\n     */\n    var defineConfigurable = (function (target, props) {\n        for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {\n            var key = _a[_i];\n            Object.defineProperty(target, key, {\n                value: props[key],\n                enumerable: false,\n                writable: false,\n                configurable: true\n            });\n        }\n        return target;\n    });\n\n    /**\n     * Returns the global object associated with provided element.\n     *\n     * @param {Object} target\n     * @returns {Object}\n     */\n    var getWindowOf = (function (target) {\n        // Assume that the element is an instance of Node, which means that it\n        // has the \"ownerDocument\" property from which we can retrieve a\n        // corresponding global object.\n        var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;\n        // Return the local global object if it's not possible extract one from\n        // provided element.\n        return ownerGlobal || global$1;\n    });\n\n    // Placeholder of an empty content rectangle.\n    var emptyRect = createRectInit(0, 0, 0, 0);\n    /**\n     * Converts provided string to a number.\n     *\n     * @param {number|string} value\n     * @returns {number}\n     */\n    function toFloat(value) {\n        return parseFloat(value) || 0;\n    }\n    /**\n     * Extracts borders size from provided styles.\n     *\n     * @param {CSSStyleDeclaration} styles\n     * @param {...string} positions - Borders positions (top, right, ...)\n     * @returns {number}\n     */\n    function getBordersSize(styles) {\n        var positions = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            positions[_i - 1] = arguments[_i];\n        }\n        return positions.reduce(function (size, position) {\n            var value = styles['border-' + position + '-width'];\n            return size + toFloat(value);\n        }, 0);\n    }\n    /**\n     * Extracts paddings sizes from provided styles.\n     *\n     * @param {CSSStyleDeclaration} styles\n     * @returns {Object} Paddings box.\n     */\n    function getPaddings(styles) {\n        var positions = ['top', 'right', 'bottom', 'left'];\n        var paddings = {};\n        for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {\n            var position = positions_1[_i];\n            var value = styles['padding-' + position];\n            paddings[position] = toFloat(value);\n        }\n        return paddings;\n    }\n    /**\n     * Calculates content rectangle of provided SVG element.\n     *\n     * @param {SVGGraphicsElement} target - Element content rectangle of which needs\n     *      to be calculated.\n     * @returns {DOMRectInit}\n     */\n    function getSVGContentRect(target) {\n        var bbox = target.getBBox();\n        return createRectInit(0, 0, bbox.width, bbox.height);\n    }\n    /**\n     * Calculates content rectangle of provided HTMLElement.\n     *\n     * @param {HTMLElement} target - Element for which to calculate the content rectangle.\n     * @returns {DOMRectInit}\n     */\n    function getHTMLElementContentRect(target) {\n        // Client width & height properties can't be\n        // used exclusively as they provide rounded values.\n        var clientWidth = target.clientWidth, clientHeight = target.clientHeight;\n        // By this condition we can catch all non-replaced inline, hidden and\n        // detached elements. Though elements with width & height properties less\n        // than 0.5 will be discarded as well.\n        //\n        // Without it we would need to implement separate methods for each of\n        // those cases and it's not possible to perform a precise and performance\n        // effective test for hidden elements. E.g. even jQuery's ':visible' filter\n        // gives wrong results for elements with width & height less than 0.5.\n        if (!clientWidth && !clientHeight) {\n            return emptyRect;\n        }\n        var styles = getWindowOf(target).getComputedStyle(target);\n        var paddings = getPaddings(styles);\n        var horizPad = paddings.left + paddings.right;\n        var vertPad = paddings.top + paddings.bottom;\n        // Computed styles of width & height are being used because they are the\n        // only dimensions available to JS that contain non-rounded values. It could\n        // be possible to utilize the getBoundingClientRect if only it's data wasn't\n        // affected by CSS transformations let alone paddings, borders and scroll bars.\n        var width = toFloat(styles.width), height = toFloat(styles.height);\n        // Width & height include paddings and borders when the 'border-box' box\n        // model is applied (except for IE).\n        if (styles.boxSizing === 'border-box') {\n            // Following conditions are required to handle Internet Explorer which\n            // doesn't include paddings and borders to computed CSS dimensions.\n            //\n            // We can say that if CSS dimensions + paddings are equal to the \"client\"\n            // properties then it's either IE, and thus we don't need to subtract\n            // anything, or an element merely doesn't have paddings/borders styles.\n            if (Math.round(width + horizPad) !== clientWidth) {\n                width -= getBordersSize(styles, 'left', 'right') + horizPad;\n            }\n            if (Math.round(height + vertPad) !== clientHeight) {\n                height -= getBordersSize(styles, 'top', 'bottom') + vertPad;\n            }\n        }\n        // Following steps can't be applied to the document's root element as its\n        // client[Width/Height] properties represent viewport area of the window.\n        // Besides, it's as well not necessary as the <html> itself neither has\n        // rendered scroll bars nor it can be clipped.\n        if (!isDocumentElement(target)) {\n            // In some browsers (only in Firefox, actually) CSS width & height\n            // include scroll bars size which can be removed at this step as scroll\n            // bars are the only difference between rounded dimensions + paddings\n            // and \"client\" properties, though that is not always true in Chrome.\n            var vertScrollbar = Math.round(width + horizPad) - clientWidth;\n            var horizScrollbar = Math.round(height + vertPad) - clientHeight;\n            // Chrome has a rather weird rounding of \"client\" properties.\n            // E.g. for an element with content width of 314.2px it sometimes gives\n            // the client width of 315px and for the width of 314.7px it may give\n            // 314px. And it doesn't happen all the time. So just ignore this delta\n            // as a non-relevant.\n            if (Math.abs(vertScrollbar) !== 1) {\n                width -= vertScrollbar;\n            }\n            if (Math.abs(horizScrollbar) !== 1) {\n                height -= horizScrollbar;\n            }\n        }\n        return createRectInit(paddings.left, paddings.top, width, height);\n    }\n    /**\n     * Checks whether provided element is an instance of the SVGGraphicsElement.\n     *\n     * @param {Element} target - Element to be checked.\n     * @returns {boolean}\n     */\n    var isSVGGraphicsElement = (function () {\n        // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement\n        // interface.\n        if (typeof SVGGraphicsElement !== 'undefined') {\n            return function (target) { return target instanceof getWindowOf(target).SVGGraphicsElement; };\n        }\n        // If it's so, then check that element is at least an instance of the\n        // SVGElement and that it has the \"getBBox\" method.\n        // eslint-disable-next-line no-extra-parens\n        return function (target) { return (target instanceof getWindowOf(target).SVGElement &&\n            typeof target.getBBox === 'function'); };\n    })();\n    /**\n     * Checks whether provided element is a document element (<html>).\n     *\n     * @param {Element} target - Element to be checked.\n     * @returns {boolean}\n     */\n    function isDocumentElement(target) {\n        return target === getWindowOf(target).document.documentElement;\n    }\n    /**\n     * Calculates an appropriate content rectangle for provided html or svg element.\n     *\n     * @param {Element} target - Element content rectangle of which needs to be calculated.\n     * @returns {DOMRectInit}\n     */\n    function getContentRect(target) {\n        if (!isBrowser) {\n            return emptyRect;\n        }\n        if (isSVGGraphicsElement(target)) {\n            return getSVGContentRect(target);\n        }\n        return getHTMLElementContentRect(target);\n    }\n    /**\n     * Creates rectangle with an interface of the DOMRectReadOnly.\n     * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly\n     *\n     * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.\n     * @returns {DOMRectReadOnly}\n     */\n    function createReadOnlyRect(_a) {\n        var x = _a.x, y = _a.y, width = _a.width, height = _a.height;\n        // If DOMRectReadOnly is available use it as a prototype for the rectangle.\n        var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;\n        var rect = Object.create(Constr.prototype);\n        // Rectangle's properties are not writable and non-enumerable.\n        defineConfigurable(rect, {\n            x: x, y: y, width: width, height: height,\n            top: y,\n            right: x + width,\n            bottom: height + y,\n            left: x\n        });\n        return rect;\n    }\n    /**\n     * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.\n     * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit\n     *\n     * @param {number} x - X coordinate.\n     * @param {number} y - Y coordinate.\n     * @param {number} width - Rectangle's width.\n     * @param {number} height - Rectangle's height.\n     * @returns {DOMRectInit}\n     */\n    function createRectInit(x, y, width, height) {\n        return { x: x, y: y, width: width, height: height };\n    }\n\n    /**\n     * Class that is responsible for computations of the content rectangle of\n     * provided DOM element and for keeping track of it's changes.\n     */\n    var ResizeObservation = /** @class */ (function () {\n        /**\n         * Creates an instance of ResizeObservation.\n         *\n         * @param {Element} target - Element to be observed.\n         */\n        function ResizeObservation(target) {\n            /**\n             * Broadcasted width of content rectangle.\n             *\n             * @type {number}\n             */\n            this.broadcastWidth = 0;\n            /**\n             * Broadcasted height of content rectangle.\n             *\n             * @type {number}\n             */\n            this.broadcastHeight = 0;\n            /**\n             * Reference to the last observed content rectangle.\n             *\n             * @private {DOMRectInit}\n             */\n            this.contentRect_ = createRectInit(0, 0, 0, 0);\n            this.target = target;\n        }\n        /**\n         * Updates content rectangle and tells whether it's width or height properties\n         * have changed since the last broadcast.\n         *\n         * @returns {boolean}\n         */\n        ResizeObservation.prototype.isActive = function () {\n            var rect = getContentRect(this.target);\n            this.contentRect_ = rect;\n            return (rect.width !== this.broadcastWidth ||\n                rect.height !== this.broadcastHeight);\n        };\n        /**\n         * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data\n         * from the corresponding properties of the last observed content rectangle.\n         *\n         * @returns {DOMRectInit} Last observed content rectangle.\n         */\n        ResizeObservation.prototype.broadcastRect = function () {\n            var rect = this.contentRect_;\n            this.broadcastWidth = rect.width;\n            this.broadcastHeight = rect.height;\n            return rect;\n        };\n        return ResizeObservation;\n    }());\n\n    var ResizeObserverEntry = /** @class */ (function () {\n        /**\n         * Creates an instance of ResizeObserverEntry.\n         *\n         * @param {Element} target - Element that is being observed.\n         * @param {DOMRectInit} rectInit - Data of the element's content rectangle.\n         */\n        function ResizeObserverEntry(target, rectInit) {\n            var contentRect = createReadOnlyRect(rectInit);\n            // According to the specification following properties are not writable\n            // and are also not enumerable in the native implementation.\n            //\n            // Property accessors are not being used as they'd require to define a\n            // private WeakMap storage which may cause memory leaks in browsers that\n            // don't support this type of collections.\n            defineConfigurable(this, { target: target, contentRect: contentRect });\n        }\n        return ResizeObserverEntry;\n    }());\n\n    var ResizeObserverSPI = /** @class */ (function () {\n        /**\n         * Creates a new instance of ResizeObserver.\n         *\n         * @param {ResizeObserverCallback} callback - Callback function that is invoked\n         *      when one of the observed elements changes it's content dimensions.\n         * @param {ResizeObserverController} controller - Controller instance which\n         *      is responsible for the updates of observer.\n         * @param {ResizeObserver} callbackCtx - Reference to the public\n         *      ResizeObserver instance which will be passed to callback function.\n         */\n        function ResizeObserverSPI(callback, controller, callbackCtx) {\n            /**\n             * Collection of resize observations that have detected changes in dimensions\n             * of elements.\n             *\n             * @private {Array<ResizeObservation>}\n             */\n            this.activeObservations_ = [];\n            /**\n             * Registry of the ResizeObservation instances.\n             *\n             * @private {Map<Element, ResizeObservation>}\n             */\n            this.observations_ = new MapShim();\n            if (typeof callback !== 'function') {\n                throw new TypeError('The callback provided as parameter 1 is not a function.');\n            }\n            this.callback_ = callback;\n            this.controller_ = controller;\n            this.callbackCtx_ = callbackCtx;\n        }\n        /**\n         * Starts observing provided element.\n         *\n         * @param {Element} target - Element to be observed.\n         * @returns {void}\n         */\n        ResizeObserverSPI.prototype.observe = function (target) {\n            if (!arguments.length) {\n                throw new TypeError('1 argument required, but only 0 present.');\n            }\n            // Do nothing if current environment doesn't have the Element interface.\n            if (typeof Element === 'undefined' || !(Element instanceof Object)) {\n                return;\n            }\n            if (!(target instanceof getWindowOf(target).Element)) {\n                throw new TypeError('parameter 1 is not of type \"Element\".');\n            }\n            var observations = this.observations_;\n            // Do nothing if element is already being observed.\n            if (observations.has(target)) {\n                return;\n            }\n            observations.set(target, new ResizeObservation(target));\n            this.controller_.addObserver(this);\n            // Force the update of observations.\n            this.controller_.refresh();\n        };\n        /**\n         * Stops observing provided element.\n         *\n         * @param {Element} target - Element to stop observing.\n         * @returns {void}\n         */\n        ResizeObserverSPI.prototype.unobserve = function (target) {\n            if (!arguments.length) {\n                throw new TypeError('1 argument required, but only 0 present.');\n            }\n            // Do nothing if current environment doesn't have the Element interface.\n            if (typeof Element === 'undefined' || !(Element instanceof Object)) {\n                return;\n            }\n            if (!(target instanceof getWindowOf(target).Element)) {\n                throw new TypeError('parameter 1 is not of type \"Element\".');\n            }\n            var observations = this.observations_;\n            // Do nothing if element is not being observed.\n            if (!observations.has(target)) {\n                return;\n            }\n            observations.delete(target);\n            if (!observations.size) {\n                this.controller_.removeObserver(this);\n            }\n        };\n        /**\n         * Stops observing all elements.\n         *\n         * @returns {void}\n         */\n        ResizeObserverSPI.prototype.disconnect = function () {\n            this.clearActive();\n            this.observations_.clear();\n            this.controller_.removeObserver(this);\n        };\n        /**\n         * Collects observation instances the associated element of which has changed\n         * it's content rectangle.\n         *\n         * @returns {void}\n         */\n        ResizeObserverSPI.prototype.gatherActive = function () {\n            var _this = this;\n            this.clearActive();\n            this.observations_.forEach(function (observation) {\n                if (observation.isActive()) {\n                    _this.activeObservations_.push(observation);\n                }\n            });\n        };\n        /**\n         * Invokes initial callback function with a list of ResizeObserverEntry\n         * instances collected from active resize observations.\n         *\n         * @returns {void}\n         */\n        ResizeObserverSPI.prototype.broadcastActive = function () {\n            // Do nothing if observer doesn't have active observations.\n            if (!this.hasActive()) {\n                return;\n            }\n            var ctx = this.callbackCtx_;\n            // Create ResizeObserverEntry instance for every active observation.\n            var entries = this.activeObservations_.map(function (observation) {\n                return new ResizeObserverEntry(observation.target, observation.broadcastRect());\n            });\n            this.callback_.call(ctx, entries, ctx);\n            this.clearActive();\n        };\n        /**\n         * Clears the collection of active observations.\n         *\n         * @returns {void}\n         */\n        ResizeObserverSPI.prototype.clearActive = function () {\n            this.activeObservations_.splice(0);\n        };\n        /**\n         * Tells whether observer has active observations.\n         *\n         * @returns {boolean}\n         */\n        ResizeObserverSPI.prototype.hasActive = function () {\n            return this.activeObservations_.length > 0;\n        };\n        return ResizeObserverSPI;\n    }());\n\n    // Registry of internal observers. If WeakMap is not available use current shim\n    // for the Map collection as it has all required methods and because WeakMap\n    // can't be fully polyfilled anyway.\n    var observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();\n    /**\n     * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation\n     * exposing only those methods and properties that are defined in the spec.\n     */\n    var ResizeObserver = /** @class */ (function () {\n        /**\n         * Creates a new instance of ResizeObserver.\n         *\n         * @param {ResizeObserverCallback} callback - Callback that is invoked when\n         *      dimensions of the observed elements change.\n         */\n        function ResizeObserver(callback) {\n            if (!(this instanceof ResizeObserver)) {\n                throw new TypeError('Cannot call a class as a function.');\n            }\n            if (!arguments.length) {\n                throw new TypeError('1 argument required, but only 0 present.');\n            }\n            var controller = ResizeObserverController.getInstance();\n            var observer = new ResizeObserverSPI(callback, controller, this);\n            observers.set(this, observer);\n        }\n        return ResizeObserver;\n    }());\n    // Expose public methods of ResizeObserver.\n    [\n        'observe',\n        'unobserve',\n        'disconnect'\n    ].forEach(function (method) {\n        ResizeObserver.prototype[method] = function () {\n            var _a;\n            return (_a = observers.get(this))[method].apply(_a, arguments);\n        };\n    });\n\n    var index = (function () {\n        // Export existing implementation if available.\n        if (typeof global$1.ResizeObserver !== 'undefined') {\n            return global$1.ResizeObserver;\n        }\n        return ResizeObserver;\n    })();\n\n    return index;\n\n})));\n","import global from './global';\nimport has from '../has/has';\n`!has('build-elide')`;\nimport * as Resize from 'resize-observer-polyfill';\n\nexport interface DOMRectReadOnly {\n\treadonly x: number;\n\treadonly y: number;\n\treadonly width: number;\n\treadonly height: number;\n\treadonly top: number;\n\treadonly right: number;\n\treadonly bottom: number;\n\treadonly left: number;\n}\n\nexport interface ResizeObserverCallback {\n\t(entries: ResizeObserverEntry[], observer: ResizeObserver): void;\n}\n\nexport interface ResizeObserverEntry {\n\treadonly target: Element;\n\treadonly contentRect: DOMRectReadOnly;\n}\n\nexport interface ResizeObserver {\n\tprototype: ResizeObserver;\n\tnew (callback: ResizeObserverCallback): ResizeObserver;\n\tobserve(target: Element): void;\n\tunobserve(target: Element): void;\n\tdisconnect(): void;\n}\n\nif (!has('build-elide')) {\n\tif (!global.ResizeObserver) {\n\t\t// default is undefined when UMD module is used\n\t\tglobal.ResizeObserver = Resize.default || Resize;\n\t}\n}\n\nexport default global.ResizeObserver as ResizeObserver;\n"],"sourceRoot":""}